R"(#include <unordered_map>
#include <string>
#include <vector>
#include <iostream>
#include <candle.h>
%INCLUDES%
using namespace daytrender;

namespace daytrender
{
	struct indicator_data
	{
		std::string label;
		std::vector<double> data;
	};
	typedef std::unordered_map<std::string, indicator_data> indicator_dataset;
	struct algorithm_data
	{
		std::unordered_map<std::string, indicator_data> dataset;
		unsigned int action;
	};
}
%INDICATOR_DEFINE%
%INDICATOR_DECLARE%

extern "C" std::string getName()
{
	return "%ALGORITHM_NAME%";
}

unsigned int getAction(const indicator_dataset& dataset, const candleset& candles)
{
	unsigned int length = candles.size();
	%INDICATOR_DATA%
	%ALGORITHM_SCRIPT%
	return 0U;
}

extern "C" bool process(algorithm_data& out, const candleset& candles)
{
	if(candles.empty())
	{
		return false;
	}

	indicator_dataset dataset;
	%DATASET_INIT%

	out.dataset = dataset;
	out.action = getAction(dataset, candles);
	return true;
}
)"