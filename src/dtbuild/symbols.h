#pragma once

namespace dtbuild
{
	enum symbol_type: short
	{
		NO_TYPE,
		
		// Non-terminal types used for parsing
		FUNC,
		FUNCBDY,
		INDI,
		INDI_INIT,
		ALGO,
		ALGO_ARG,
		ALGO_ARGS,
		ID,
		DECL_ID,
		INIT_LIST,
		INIT_ARGS,
		LIST,
		ARG,
		ARGS,
		DECLARATION,
		DECLARATOR,
		INITIALIZER,

		// Statements
		STMTS,
		STMT,
		COMPOUND_STMT,
		DECL_STMT,
		EXPR_STMT,
		SEL_STMT,
		ELSE_STMT,
		THIS_STMT,
		ITER_STMT,
		JUMP_STMT,
		FOR_STMT,
		WHILE_STMT,
		IF_STMT,

		// Expressions
		EXPR,
		PRIM_EXPR,
		POSTFIX_EXPR,
		UNARY_EXPR,
		EQ_EXPR,
		EQ_EXPR1,
		COMP_EXPR,
		ASGN_EXPR,
		COND_EXPR,
		OR_EXPR,
		OR_EXPR1,
		AND_EXPR,
		AND_EXPR1,
		RELAT_EXPR,
		RELAT_EXPR1,
		ADD_EXPR,
		ADD_EXPR1,
		MUL_EXPR,
		MUL_EXPR1,
		CAST_EXPR,

		TERM,
		TERM1,
		FACTOR,
		FACTOR1,
		CONST,
		TYPENAME,

		// Operators
		EQ_OP,
		ADD_OP,
		MUL_OP,
		ASGN_OP,
		RELAT_OP,
		PREFIX_OP,
		POSTFIX_OP,
		INDEX_OP,
		CALL_OP,
		ACCESS_OP,
		POINT_OP,
		UNARY_OP,
		CAST_OP,

		ELIPSIS,
		COMMA_ELIPSIS,
		PROG_ITEM,
		OPTIONAL,
		PROGRAM,
		
		NT_CUTOFF = PROGRAM,

		//##########################################################
		//#     terminal types used for tokenizing and parsing     #
		//##########################################################

		
		IDENTIFIER,
		NUM_LITERAL,
		STRING_LITERAL,
		CHAR_LITERAL,
		POUND_SIGN,
		DOLLAR_SIGN,
		QUESTION_MARK,
		TAB,
		SPACE,
		NEW_LINE,
		SQUOTE,
		DQUOTE,
		LPAREN,
		RPAREN,
		LBRACE,
		RBRACE,
		LBRACK,
		RBRACK,
		INT_TYPE,
		DOUBLE_TYPE,
		ALGORITHM_TYPE,
		INDICATOR_TYPE,
		RETURN,
		BREAK,
		LANGBRACK,
		RANGBRACK,
		LINE_COMMENT,
		COMMENT_START,
		COMMENT_END,
		COMMA,
		PERIOD,
		SEMICOLON,
		COLON,
		AND,
		AND_COMP,
		OR,
		XOR,
		OR_COMP,
		PLUS,
		INC,
		DEC,
		SUB_ASGN,
		ADD_ASGN,
		MUL_ASGN,
		DIV_ASGN,
		MOD_ASGN,
		EQUALS_ASGN,
		EQUALS_COMP,
		NEQUALS_COMP,
		MINUS,
		ASTERISK,
		SLASH,
		MODULUS,
		NOT,
		IF_KWD,
		ELSE_KWD,
		WHILE_KWD,
		FOR_KWD,
		TILDE,
		GTOET,
		LTOET,
		REQUIRE_PREPRO,
		INCLUDE_PREPRO
	};
}